import { createClient } from "@supabase/supabase-js"
import type { Database } from "@/types/database"

// Environment variables with fallbacks for Next.js
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://zphkclbhhouulgfsfawi.supabase.co"
const supabaseAnonKey =
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpwaGtjbGJoaG91dWxnZnNmYXdpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxMTg5NTAsImV4cCI6MjA2MjY5NDk1MH0.uHVMG9BAg0thmzFqlliTUbI7vJwbPzE_uZGy9q-Lcyw"

console.log("üîß Supabase Config:", {
  url: supabaseUrl,
  hasAnonKey: !!supabaseAnonKey,
  keyLength: supabaseAnonKey?.length,
})

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå Missing Supabase environment variables:", { supabaseUrl, hasAnonKey: !!supabaseAnonKey })
  throw new Error("Missing Supabase environment variables")
}

// „Ç∑„É≥„Ç∞„É´„Éà„É≥„Éë„Çø„Éº„É≥„ÅßSupabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çí‰ΩúÊàê
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null

export const supabase = (() => {
  if (!supabaseInstance) {
    console.log("üîÑ Creating new Supabase client instance")
    supabaseInstance = createClient<Database>(supabaseUrl, supabaseAnonKey, {
      auth: {
        persistSession: true, // „Éñ„É©„Ç¶„Ç∂„Çπ„Éà„É¨„Éº„Ç∏„Å´„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰øùÂ≠ò
        autoRefreshToken: true, // „Éà„Éº„ÇØ„É≥„ÅÆËá™ÂãïÊõ¥Êñ∞
        detectSessionInUrl: false, // Ëá™ÂãïÊ§úÂá∫„ÇíÁÑ°ÂäπÂåñÔºàÊâãÂãï„ÅßÂá¶ÁêÜÔºâ
        flowType: "pkce", // PKCE„Éï„É≠„Éº„Çí‰ΩøÁî®
        storage: {
          getItem: (key) => {
            if (typeof window === "undefined") return null
            return window.localStorage.getItem(key)
          },
          setItem: (key, value) => {
            if (typeof window === "undefined") return
            window.localStorage.setItem(key, value)
          },
          removeItem: (key) => {
            if (typeof window === "undefined") return
            window.localStorage.removeItem(key)
          },
        },
      },
    })
  } else {
    console.log("‚ôªÔ∏è Reusing existing Supabase client instance")
  }
  return supabaseInstance
})()

// „Çµ„Éº„Éê„Éº„Çµ„Ç§„ÉâÁî®„ÅÆSupabase„ÇØ„É©„Ç§„Ç¢„É≥„Éà
export const createServerSupabaseClient = () => {
  return createClient<Database>(supabaseUrl, supabaseAnonKey, {
    auth: {
      persistSession: false,
    },
  })
}
